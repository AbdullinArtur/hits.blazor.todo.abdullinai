@page "/"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate
@attribute [Authorize]


<PageTitle>Задачи</PageTitle>

<h1>Мои задачи</h1>

<!-- 
<table class="table table-bordered"></table> 
-->

<div class="container">
	@if (tasks == null)
	{
		<tr>
			<td colspan="5">Loading...</td>
		</tr>
	}
	else
	{
		<div class="btn-group m-2">
			<button class="btn btn-primary" @onclick = "AddTask">Новая задача</button>
		</div>
		<div class="card-group">
			@foreach (var task in tasks)
			{
				<div class="card">
					<div class="card-header"> 
						@task.Title
					</div>	
					<div class="card-body">
						<p>@task.Description</p>
						<p>@task.CreatedDate</p>
					</div>
					<div class="card-footer">	
						<a class=" btn btn-primary" href="tasks/@task.Id"> Изменить</a>
						<button class="btn btn-primary" @onclick="async () => await DeleteTask(task.Id)">Удалить</button>
					</div>	

				</div>




				<!--
				<tr>
				<td>@task.Id</td>
				<td>@task.Title</td>
				<td>@task.Description</td>
				<td>@task.CreatedDate</td>
				<td>@task.FinishDate</td>
				</tr>
				-->
			}
		</div>
	}
</div>





@code{
	// string[] tasks = ["Задача 1", "Задача 2"];
	IEnumerable<TaskItem>? tasks;


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		tasks = await data.GetAllAsync();
	}

	void AddTask()
	{
		navigate.NavigateTo("task/add");
	}

	async Task DeleteTask(int id)
	{
		await data.DeleteAsync(id);
		tasks = await data.GetAllAsync();
	}
}
